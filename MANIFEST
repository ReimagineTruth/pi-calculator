<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIUSDT Auto Trading Bot</title>
    <script src="https://s3.tradingview.com/tv.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body style="background-color: #121212; color: white; text-align: center;">

    <h2>PIUSDT Auto Trading Bot</h2>

    <!-- TradingView Widget -->
    <div class="tradingview-widget-container">
        <div id="tradingview_chart" style="height: 500px;"></div>
    </div>

    <p id="status">Waiting for signals...</p>

    <script>
        // Initialize TradingView chart
        new TradingView.widget({
            "container_id": "tradingview_chart",
            "autosize": true,
            "symbol": "BITGET:PIUSDT.P",
            "interval": "30", // 30-minute chart
            "timezone": "Etc/UTC",
            "theme": "dark",
            "style": "1",
            "locale": "en",
            "enable_publishing": false,
            "hide_side_toolbar": false
        });

        // Fetch price data from TradingView API
        async function getPriceData() {
            try {
                const response = await axios.get("https://api.bitget.com/api/spot/v1/market/ticker?symbol=PIUSDT");
                const price = parseFloat(response.data.data.close);
                console.log("Current PIUSDT Price:", price);
                return price;
            } catch (error) {
                console.error("Error fetching price:", error);
                return null;
            }
        }

        // RSI Calculation
        let priceHistory = [];
        function calculateRSI(period = 14) {
            if (priceHistory.length < period) return null;

            let gains = 0, losses = 0;
            for (let i = 1; i < period; i++) {
                let change = priceHistory[i] - priceHistory[i - 1];
                if (change > 0) gains += change;
                else losses -= change;
            }
            let rs = (gains / period) / (losses / period);
            return 100 - (100 / (1 + rs));
        }

        // Moving Average Calculation
        function calculateMovingAverage(period = 20) {
            if (priceHistory.length < period) return null;
            let sum = priceHistory.slice(-period).reduce((a, b) => a + b, 0);
            return sum / period;
        }

        // Trading Strategy
        async function checkTradeSignals() {
            let price = await getPriceData();
            if (!price) return;

            priceHistory.push(price);
            if (priceHistory.length > 20) priceHistory.shift();

            let rsi = calculateRSI(14);
            let ma = calculateMovingAverage(20);

            console.log(`RSI: ${rsi}, MA: ${ma}`);

            if (rsi && ma) {
                let statusText = "";
                if (rsi < 30 && price > ma) {
                    statusText = "ðŸ”µ BUY Signal - Oversold & Above MA!";
                } else if (rsi > 70 && price < ma) {
                    statusText = "ðŸ”´ SELL Signal - Overbought & Below MA!";
                } else {
                    statusText = "âšª No Trade Signal Yet.";
                }
                document.getElementById("status").innerText = statusText;
            }
        }

        // Run every 10 seconds
        setInterval(checkTradeSignals, 10000);
    </script>

</body>
</html>