<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pi to Currency Converter with Real-Time Analytics</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 font-roboto">
  <div class="flex items-center justify-center h-screen">
    <div class="p-6 w-full max-w-md shadow-lg bg-white rounded-lg overflow-y-auto" style="max-height: 90vh;">
      <div class="mb-4">
        <h2 class="text-xl font-bold text-gray-800">Pi to Currency Converter</h2>
      </div>
      <div class="mb-2">
        <p class="text-sm text-gray-600" id="current-rate">Fetching exchange rate...</p>
      </div>
      <input
        type="number"
        placeholder="Enter Pi amount"
        class="w-full p-2 border border-gray-300 rounded mt-2"
      />
      <select class="w-full p-2 border border-gray-300 rounded mt-2" id="currency-select">
        <option value="usd">USD</option>
        <option value="eur">EUR</option>
        <option value="gbp">GBP</option>
        <option value="jpy">JPY</option>
        <option value="aud">AUD</option>
        <option value="cad">CAD</option>
        <option value="chf">CHF</option>
        <option value="cny">CNY</option>
        <option value="inr">INR</option>
        <option value="krw">KRW</option>
        <option value="sgd">SGD</option>
        <option value="hkd">HKD</option>
        <option value="idr">IDR</option>
        <option value="myr">MYR</option>
        <option value="php">PHP</option>
        <option value="thb">THB</option>
        <option value="vnd">VND</option>
      </select>
      <button class="mt-4 w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
        Convert
      </button>
      <div class="mt-4">
        <p class="text-lg font-semibold text-gray-800" id="equivalent">Equivalent: 0.00</p>
      </div>
      <div class="mt-6">
        <h3 class="text-lg font-bold text-gray-800 mb-2">Real-Time Analytics</h3>
        <canvas id="exchangeRateChart" width="400" height="200"></canvas>
      </div>
      <div class="mt-6">
        <h3 class="text-lg font-bold text-gray-800 mb-2">TradingView Chart</h3>
        <div class="tradingview-widget-container" style="height:100%;width:100%">
          <div class="tradingview-widget-container__widget" style="height:calc(100% - 32px);width:100%"></div>
          <div class="tradingview-widget-copyright">
            <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">
              <span class="blue-text">Track all markets on TradingView</span>
            </a>
          </div>
          <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js" async>
          {
            "autosize": true,
            "symbol": "BITMART:PIUSDT",
            "interval": "D",
            "timezone": "Etc/UTC",
            "theme": "dark",
            "style": "1",
            "locale": "en",
            "backgroundColor": "rgba(0, 0, 0, 1)",
            "allow_symbol_change": true,
            "calendar": false,
            "support_host": "https://www.tradingview.com"
          }
          </script>
        </div>
      </div>
    </div>
  </div>
  <script>
    const piAmountInput = document.querySelector('input[type="number"]');
    const convertButton = document.querySelector('button');
    const equivalentText = document.getElementById('equivalent');
    const exchangeRateText = document.getElementById('current-rate');
    const currencySelect = document.getElementById('currency-select');
    const ctx = document.getElementById('exchangeRateChart').getContext('2d');

    let exchangeRates = {};
    let chart;

    const fetchExchangeRates = async () => {
      try {
        const response = await fetch("https://api.coingecko.com/api/v3/simple/price?ids=pi-network-iou&vs_currencies=usd,eur,gbp,jpy,aud,cad,chf,cny,inr,krw,sgd,hkd,idr,myr,php,thb,vnd");
        const data = await response.json();
        exchangeRates = data["pi-network-iou"];
        exchangeRateText.textContent = `Current Rate: 1 Pi = $${exchangeRates.usd} USD`;
        updateChart();
      } catch (error) {
        console.error("Error fetching exchange rates:", error);
      }
    };

    const convertToCurrency = () => {
      const piValue = parseFloat(piAmountInput.value);
      const selectedCurrency = currencySelect.value;
      if (!isNaN(piValue) && exchangeRates[selectedCurrency] !== undefined) {
        const equivalentAmount = (piValue * exchangeRates[selectedCurrency]).toFixed(2);
        equivalentText.textContent = `Equivalent: ${equivalentAmount.replace(/\B(?=(\d{3})+(?!\d))/g, ",")} ${selectedCurrency.toUpperCase()}`;
      } else {
        equivalentText.textContent = "Equivalent: 0.00";
      }
    };

    const updateChart = () => {
      const labels = Object.keys(exchangeRates).map(currency => currency.toUpperCase());
      const data = Object.values(exchangeRates);

      if (chart) {
        chart.destroy();
      }

      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Exchange Rate (1 Pi)',
            data: data,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            fill: false
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    };

    convertButton.addEventListener('click', convertToCurrency);

    fetchExchangeRates();
  </script>

  <div class="bg-gray-900 text-white text-center mt-10">
    <h1 class="text-4xl font-bold mt-10">Pi Network Fire Sale Chart</h1>
    <div class="flex justify-center mt-10">
        <canvas id="piChart" class="max-w-full w-11/12 md:w-3/4 lg:w-1/2"></canvas>
    </div>

    <h1 class="text-4xl font-bold mt-10">Pi Network Rainbow Chart</h1>
    <div class="flex justify-center mt-10">
        <canvas id="piRainbowChart" class="max-w-full w-11/12 md:w-3/4 lg:w-1/2"></canvas>
    </div>

    <h1 class="text-4xl font-bold mt-10">Pi Network Blocks</h1>
    <div class="flex justify-center mt-10">
        <canvas id="piBlocksChart" class="max-w-full w-11/12 md:w-3/4 lg:w-1/2"></canvas>
    </div>

    <script>
        const piCtx = document.getElementById('piChart').getContext('2d');
        const piRainbowCtx = document.getElementById('piRainbowChart').getContext('2d');
        const piBlocksCtx = document.getElementById('piBlocksChart').getContext('2d');

        // Sample price data for Pi Network
        const piData = {
            labels: ['2024', '2025', '2026', '2027', '2028', '2029', '2030'],
            datasets: [
                {
                    label: 'Pi Price ($)',
                    data: [1, 5, 10, 50, 100, 314, 1000], // Adjust future price predictions
                    borderColor: 'gold',
                    backgroundColor: 'rgba(255, 215, 0, 0.2)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }
            ]
        };

        // Fire Sale Rainbow Zones
        const fireSaleZones = [
            { color: 'rgba(255, 0, 0, 0.3)', label: 'ðŸ”¥ Fire Sale (<$5)' },
            { color: 'rgba(255, 165, 0, 0.3)', label: 'ðŸŸ  Still Cheap ($5-$10)' },
            { color: 'rgba(255, 255, 0, 0.3)', label: 'ðŸŸ¡ Accumulate Zone ($10-$50)' },
            { color: 'rgba(0, 128, 0, 0.3)', label: 'ðŸŸ¢ HODL Strong ($50-$100)' },
            { color: 'rgba(0, 0, 255, 0.3)', label: 'ðŸ”µ Early Retirement ($100+)' }
        ];

        // Draw Pi Network Fire Sale Chart
        new Chart(piCtx, {
            type: 'line',
            data: piData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true
                    },
                    annotation: {
                        annotations: fireSaleZones.map((zone, index) => ({
                            type: 'box',
                            drawTime: 'beforeDatasetsDraw',
                            yMin: index === 0 ? 0 : piData.datasets[0].data[index - 1],
                            yMax: piData.datasets[0].data[index],
                            backgroundColor: zone.color,
                            label: {
                                content: zone.label,
                                display: true,
                                position: 'center'
                            }
                        }))
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Pi Price ($)' }
                    },
                    x: {
                        title: { display: true, text: 'Year' }
                    }
                }
            }
        });

        // Sample price data for Pi Network Rainbow Chart
        const piRainbowData = {
            labels: ['2024', '2025', '2026', '2027', '2028', '2029', '2030'],
            datasets: [
                {
                    label: 'Pi Price ($)',
                    data: [1, 5, 10, 50, 100, 314, 1000], // Adjust future price predictions
                    borderColor: 'orange',
                    backgroundColor: 'rgba(255, 165, 0, 0.2)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }
            ]
        };

        // Pi Rainbow Zones
        const piRainbowZones = [
            { color: 'rgba(255, 0, 0, 0.3)', label: 'ðŸ”¥ Fire Sale (<$5)' },
            { color: 'rgba(255, 165, 0, 0.3)', label: 'ðŸŸ  Still Cheap ($5-$10)' },
            { color: 'rgba(255, 255, 0, 0.3)', label: 'ðŸŸ¡ Accumulate Zone ($10-$50)' },
            { color: 'rgba(0, 128, 0, 0.3)', label: 'ðŸŸ¢ HODL Strong ($50-$100)' },
            { color: 'rgba(0, 0, 255, 0.3)', label: 'ðŸ”µ Early Retirement ($100+)' }
        ];

        // Draw Pi Network Rainbow Chart
        new Chart(piRainbowCtx, {
            type: 'line',
            data: piRainbowData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true
                    },
                    annotation: {
                        annotations: piRainbowZones.map((zone, index) => ({
                            type: 'box',
                            drawTime: 'beforeDatasetsDraw',
                            yMin: index === 0 ? 0 : piRainbowData.datasets[0].data[index - 1],
                            yMax: piRainbowData.datasets[0].data[index],
                            backgroundColor: zone.color,
                            label: {
                                content: zone.label,
                                display: true,
                                position: 'center'
                            }
                        }))
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Pi Price ($)' }
                    },
                    x: {
                        title: { display: true, text: 'Year' }
                    }
                }
            }
        });

        // Sample block data for Pi Network
        const piBlocksData = {
            labels: ['2024', '2025', '2026', '2027', '2028', '2029', '2030'],
            datasets: [
                {
                    label: 'Pi Blocks',
                    data: [1000, 5000, 10000, 50000, 100000, 314000, 1000000], // Adjust future block predictions
                    borderColor: 'purple',
                    backgroundColor: 'rgba(128, 0, 128, 0.2)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }
            ]
        };

        // Draw Pi Network Blocks Chart
        new Chart(piBlocksCtx, {
            type: 'line',
            data: piBlocksData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Pi Blocks' }
                    },
                    x: {
                        title: { display: true, text: 'Year' }
                    }
                }
            }
        });
    </script>
  </div>
</body>
</html>